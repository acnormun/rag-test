import os
from dotenv import load_dotenv
from langchain_community.vectorstores import FAISS
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.chains import RetrievalQA

# === Restaurador de identificadores ===
def restaurar_identificadores(resposta: str, mapa_dir: str) -> str:
    substituicoes = {}
    for arquivo in os.listdir(mapa_dir):
        if arquivo.endswith("_mapa.txt"):
            with open(os.path.join(mapa_dir, arquivo), "r", encoding="utf-8") as f:
                for linha in f:
                    if "|" in linha:
                        ident, nome = linha.strip().split("|", 1)
                        substituicoes[ident] = nome

    for ident in sorted(substituicoes, key=len, reverse=True):
        nome = substituicoes[ident]
        resposta = resposta.replace(ident, f"{nome} (identificado como {ident})")

    return resposta

# === INICIALIZA√á√ÉO ===
load_dotenv()
print('testando...')

# 1. Carrega os arquivos da pasta anonimizados/
caminho_base = "anonimizados/"
arquivos_txt = [f for f in os.listdir(caminho_base) if f.endswith(".txt")]

if not arquivos_txt:
    print("‚ö†Ô∏è Nenhum arquivo .txt encontrado em 'anonimizados/'.")
    exit()

documents = []
for nome in arquivos_txt:
    try:
        caminho = os.path.join(caminho_base, nome)
        print(f"üì• Lendo: {nome}")
        loader = TextLoader(caminho, encoding='utf-8')
        documents.extend(loader.load())
    except Exception as e:
        print(f"‚ùå Erro ao carregar {nome}: {e}")

print(f"üìÑ Documentos carregados: {len(documents)}")

# 2. Divide os documentos
text_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)
texts = text_splitter.split_documents(documents)
print(f"üß© Partes (chunks) geradas: {len(texts)}")

if not texts:
    print("‚ö†Ô∏è Nenhum texto carregado. Verifique os arquivos .txt na pasta 'anonimizados/'.")
    exit()

# 3. Gera embeddings
embeddings = OpenAIEmbeddings()

# 4. Cria base vetorial
db = FAISS.from_documents(texts, embeddings)

# 5. Define modelo LLM
llm = ChatOpenAI(model_name="gpt-3.5-turbo")

# 6. Configura sistema RAG
qa = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=db.as_retriever(),
    verbose=True
)

# 7. Prompt personalizado
prompt_personalizado = """#PERSONA:
Voc√™ √© um analista com mais de 30 anos de experi√™ncia, especialista em an√°lise de impedimento, suspei√ß√£o e compet√™ncia de c√¢maras em processos jur√≠dicos.

#OBJETIVO:
1. Identificar se h√° impedimento ou suspei√ß√£o com base em identificadores anonimizados encontrados no texto.
2. Confirmar se o processo trata de mat√©ria de Direito P√∫blico e, portanto, deve tramitar na 3¬™ C√¢mara de Direito P√∫blico.

#TAREFAS:

### [IMPEDIMENTO E SUSPEI√á√ÉO]

1. Analise o conte√∫do integral do processo.
2. Liste todos os identificadores `#SUSP_<IDENTIFICADOR>` mencionados.
3. Para cada identificador listado, retorne no formato:
<mensagem>
*ATEN√á√ÉO!* O processo possui poss√≠vel impedimento ou suspei√ß√£o: participante identificado como `#SUSP_<IDENTIFICADOR>`.
</mensagem>
4. Caso n√£o encontre nenhum identificador do tipo `#SUSP_*`, retorne:
<mensagem_ok>
O processo est√° livre de impedimentos e suspei√ß√µes.
</mensagem_ok>

### [COMPET√äNCIA ‚Äì 3¬™ C√ÇMARA DE DIREITO P√öBLICO]

5. Verifique se o processo trata de mat√©ria t√≠pica de Direito P√∫blico, com base em:
   - Envolvimento de ente p√∫blico
   - Temas como: servidores p√∫blicos, licita√ß√µes, contratos, improbidade, tributos, atos administrativos
6. Se for Direito P√∫blico, retorne:
<mensagem_competencia>
‚úÖ Confirma-se que o processo deve tramitar na **3¬™ C√¢mara de Direito P√∫blico**.
</mensagem_competencia>
7. Caso contr√°rio, retorne:
<mensagem_competencia_erro>
‚ö†Ô∏è Aten√ß√£o: o processo n√£o apresenta elementos que justifiquem sua tramita√ß√£o na 3¬™ C√¢mara de Direito P√∫blico.
</mensagem_competencia_erro>

### [CONFORMIDADE NORMATIVA]
8. Comente se h√° ind√≠cio de irregularidade processual com base no CPC ou Regimento Interno.
"""

# 8. Envia o prompt
print(f"\nüß† Enviando an√°lise para o modelo...")
resposta = qa.run(prompt_personalizado)

# 9. Restaura identificadores para nomes reais
resposta_final = restaurar_identificadores(resposta, mapa_dir="mapas")

print(f"\n‚úÖ Resposta final:\n{resposta_final}")
